.\" Man page for ccq(7) internals
.TH CCQ 7 "May 22, 2025" "ccq Manual" "Miscellaneous Information"

.SH DESCRIPTION
This page provides insight into the design choices behind \fBccq\fR, its coding style, and specifics about its implementation of the FSRS algorithm.

.SS CODE STYLE AND PHILOSOPHY
The development of \fBccq\fR is guided by several core principles:
.TP
.B Minimalism and Conciseness
A primary goal is to maintain a small, understandable codebase, targeting approximately 1000 lines of C for the core functionality. This encourages a focus on essential features.
.TP
.B Full Control via Low-Level Operations
\fBccq\fR deliberately favors direct, low-level POSIX system calls for I/O (e.g., \fBread(2)\fR, \fBwrite(2)\fR, \fBlseek(2)\fR) and manual byte-level parsing for file formats and user input. This approach is chosen to give the developer explicit control over data handling and resource management, avoiding abstractions from libraries like \fBstdio\fR for critical path operations.
.TP
.B Single-Byte Character Processing
To ensure predictable behavior and maintain control over output, especially with custom file formats and terminal interaction, \fBccq\fR's core logic processes data as sequences of single bytes. It avoids mixing standard library functions that might implicitly handle multi-byte characters or locale-specific interpretations in its core file and string parsing routines. This guarantees that what is read from a file as a byte is treated as that byte, and what is written is exactly what is intended, byte for byte.
.TP
.B Custom Memory Management Wrappers
Functions like \fBerr_malloc\fR are used to wrap standard memory allocation calls (e.g., \fBmalloc(3)\fR, \fBcalloc(3)\fR), providing immediate error checking and program termination on allocation failure. This simplifies error handling paths in the main logic.
.TP
.B Performance Considerations
While not prematurely optimizing, the direct control over I/O and data structures can sometimes allow for performance tuning specific to \fBccq\fR's workload, by avoiding overhead associated with more general-purpose library functions.

.SS FSRS (FREE SPACED REPETITION SCHEDULER)
.TP
.B What is FSRS?
FSRS is a modern, sophisticated algorithm for scheduling flashcard reviews. Unlike older algorithms that rely on more simplistic interval calculations, FSRS models several aspects of human memory, including:
.RS
.TP
.B Stability:
How long a memory is likely to last. Increases with successful reviews.
.TP
.B Difficulty:
The inherent difficulty of a piece of information. Relatively stable for a given item.
.TP
.B Retrievability:
The probability of recalling an item at a given moment. Decreases over time.
.RE
By modeling these factors, FSRS aims to predict the optimal moment to review an item to achieve a desired level of retention (e.g., 90%) with minimal effort.
.TP
.B Why FSRS in ccq?
FSRS is chosen for its potential to significantly improve learning efficiency and long-term retention compared to simpler scheduling algorithms. Its evidence-based approach is appealing for a serious study tool.
.TP
.B ccq's FSRS Implementation
.RS
.TP
.B Scheduler Only:
\fBccq\fR implements the FSRS \fBscheduling formulas\fR. Given the current state of a card (its stability, difficulty, review history) and the outcome of the current review (e.g., "pass" or "fail"), \fBccq\fR calculates the next optimal review interval.
.TP
.B Default Parameters:
The FSRS algorithm uses a set of weights (parameters, often denoted as `w`) that influence its calculations. \fBccq\fR uses the \fBofficial, pre-defined default weights\fR provided by the FSRS developers. These weights are generally effective for a wide range of materials and users.
.TP
.B No Optimizer:
\fBccq\fR \fBdoes not\fR implement the FSRS \fBoptimizer\fR. The optimizer is a separate component or process that analyzes a user's complete review log (history of all reviews and their outcomes) to fine-tune the `w` parameters specifically for that individual's learning patterns and the material they are studying. Users seeking personalized parameter optimization would need to use external FSRS tools for that purpose and could potentially update the `W` array in `config.h` or the source if they wished, though this is an advanced modification.
.TP
.B State Tracking:
For each card, \fBccq\fR tracks:
.RS
.IP \(bu 2
Number of repetitions (\fBreps\fR).
.IP \(bu 2
Current stability (\fBs\fR).
.IP \(bu 2
Current difficulty (\fBd\fR).
.IP \(bu 2
Elapsed time since last review (\fBelap\fR, in days).
.RE
User feedback (pass/fail) is mapped to an FSRS grade (e.g., 1 for "Again", 3 for "Good"). These inputs are fed into the \fBschedule()\fR function to update the card's stability and difficulty, and to determine the next review interval in days (which is then converted to a future epoch timestamp).
.RE

.SH SEE ALSO
\fBccq\fR(1), \fBccq\fR(5)
